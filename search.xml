<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一个yarn造成的报错</title>
      <link href="/2022/errer01/"/>
      <url>/2022/errer01/</url>
      
        <content type="html"><![CDATA[<p>Vue2版本下，Vue-cli 默认使用 <code>yarn</code>安装element-ui时报如下错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">PS</span> <span class="attr">E</span>:\前端练习\<span class="number">06</span>.<span class="property">vue</span>.<span class="property">js</span>\vue\vue-manage&gt; npm install element-ui -S</span><br><span class="line">npm <span class="variable constant_">WARN</span> deprecated core-js@<span class="number">2.6</span><span class="number">.12</span>: core-js@&lt;<span class="number">3.4</span> is no longer maintained and not recommended <span class="keyword">for</span> usage due to the number <span class="keyword">of</span> issues. <span class="title class_">Because</span> <span class="keyword">of</span> the <span class="variable constant_">V8</span> engine whims, feature detection <span class="keyword">in</span> old core-js versions could cause a slowdown up to 100x even <span class="keyword">if</span> nothing is polyfilled. <span class="title class_">Please</span>, upgrade your dependencies to the actual version <span class="keyword">of</span> core-js.    </span><br><span class="line">npm <span class="variable constant_">ERR</span>! code <span class="variable constant_">E404</span></span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span> <span class="title class_">Not</span> <span class="title class_">Found</span> - <span class="variable constant_">GET</span> <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/@vue%2fvue-loader-v15 - [NOT_FOUND] @vue/vue-loader-v15 not found</span></span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span></span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span>  <span class="string">&#x27;@vue/vue-loader-v15@15.9.8&#x27;</span> is not <span class="keyword">in</span> the npm registry.</span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span> <span class="title class_">You</span> should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span> <span class="title class_">It</span> was specified <span class="keyword">as</span> a dependency <span class="keyword">of</span> <span class="string">&#x27;@vue/cli-service&#x27;</span></span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span></span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span> <span class="title class_">Note</span> that you can also install <span class="keyword">from</span> a</span><br><span class="line">npm <span class="variable constant_">ERR</span>! <span class="number">404</span> tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>! A complete log <span class="keyword">of</span> <span class="variable language_">this</span> run can be found <span class="attr">in</span>:</span><br><span class="line">npm <span class="variable constant_">ERR</span>!     <span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="title class_">Zhou</span>\<span class="title class_">AppData</span>\<span class="title class_">Roaming</span>\npm-cache\_logs\<span class="number">2022</span>-<span class="number">04</span>-04T12_35_52_739Z-debug.<span class="property">log</span></span><br></pre></td></tr></table></figure><p>改用<code>npm</code>无报错。</p><p>在第一次使用<code>vue-cli</code>创建项目的时候，工具会提示<code>是否切换到从 taobao 镜像拉起资源</code> 和选择 <code>yarn或者npm安装包</code>。</p><p>之后要修改安装工具，需要修改<code>.vuerc</code>文件。</p><blockquote><p>被保存的 preset 将会存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 preset &#x2F; 选项，可以编辑这个文件。</p><p>在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用<a href="https://npmmirror.com/">淘宝 npm 镜像源</a>以更快地安装依赖。这些选择也将会存入 <code>~/.vuerc</code>。</p></blockquote><p><strong>意思是我们的这些配置都被保持到了<code>当前系统 =&gt; 用户 =&gt; home目录 =&gt; .vuerc</code>文件下面。</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useTaobaoRegistry&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 是否使用淘宝镜像</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn&quot;</span> <span class="comment">// 使用哪个包管理器</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>也可以将该文件删除，那么在重新运行<code>vue cli</code>的时候会让你进行重新选择</strong></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生如夏花</title>
      <link href="/2022/flower/"/>
      <url>/2022/flower/</url>
      
        <content type="html"><![CDATA[<p><video width="100%" controls="controls" poster="https://img.lbwnb.vip/2022/03/2022-03-11/flower.png" src="https://video-direct-link.vercel.app/bili.mp4?aid=847289714&bvid=BV1gL4y1e7vH&cid=389075379"></videos></p><p>今天是我的第22个生日，所谓生日，就是纪念出生的日子嘛，算是一个属于每个人自己的节日。就像我不喜欢其他所有节日一样，我也不喜欢生日，其他节日是由外界规定的，它们的特殊性由外界赋予，生日的特殊性却是我们自己赋予的。</p><p>我并不觉得这是一个很特殊的日子，所以我一般不过生日。但我也非常能理解庆祝这个节日的人，因为人是需要仪式感的，这是一种高级化的本能。不管东方还是西方，古代还是现在，人们都不约而同的认为这是一个值得庆祝的日子。</p><p>但是作为一个了解过尼采的“重估一切价值”思想的现代人类，与其把快乐的价值赋予出生的那一天，不如把每一天过得顺从本心。我其实无所谓寿命能有多长，我始终认为一个人生命的价值能淋漓尽致的展现出来，那就够了，如果让我的精神每天像个尸体一样活着，那我的存在也没有多大的价值。</p><p>我喜欢朴树《生如夏花》里唱的：</p><blockquote><p>我是这耀眼的瞬间<br>是划过天边的刹那火焰<br>我为你来看我不顾一切<br>我将熄灭永不能再回来</p></blockquote><p>“生如夏花之绚烂，死如秋木之静美”是郑振铎老先生翻译的泰戈尔《飞鸟集》中的名句。夏花与春花不同，春花固然美好，不过春花的美是一种顺势的美，它美得让人觉得理所应当。而夏花则不一样，夏花之美有一种灿烂奔放之感，它的美短暂却更能体现生命的价值所在。</p><p>浪漫如朴树，后半句没有出现在歌词中，但是却能直接顺承着让听者感受到这份伤感。确实一个愿意生如夏花般绚烂的人，也只会用“我将熄灭永不能再回来”这样的话来描述自己的终结了。</p><p>生快，共勉。</p><h4 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h4><p>谢谢夫人给我的蛋糕，我很喜欢。</p><p><img src="https://img.lbwnb.vip/2022/03/2022-03-12/mycake.jpg" alt="mycake"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-无重复字符的最长子串</title>
      <link href="/2022/leetcode-002/"/>
      <url>/2022/leetcode-002/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a class="btn-beautify blue larger" href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/"   title="题目祥见此"><i class="far fa-hand-point-right"></i><span>题目祥见此</span></a><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度（s含字母、空格、数字、符号）。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sliding window(滑窗算法)<br>相对于前后两个指针在中间截取字符串，截到最后比较无重复字符串的最大长度，得出最终结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">shift</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. shift() 方法用于把数组的第一个元素从其中删除。</span></span><br><span class="line"><span class="comment">2. 返回值： 被删除的元素（即数组原来的第一个元素的值）。</span></span><br><span class="line"><span class="comment">3. 如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。</span></span><br><span class="line"><span class="comment">4. 请注意，该方法不创建新数组，而是直接修改原有的 array。所以该方法会改变数组的长度！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">array.<span class="title function_">indexOf</span>()</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span></span><br><span class="line"><span class="comment">如果没有找到匹配的字符串则返回 -1。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; s.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr.<span class="title function_">indexOf</span>(s[j]) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            arr.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="comment">// 数组中有重复的，就通过shift()把数组从头删到没有重复的</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr.<span class="title function_">push</span>(s[j])</span><br><span class="line">        max = max &gt; arr.<span class="property">length</span> ? max : arr.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-两数之和</title>
      <link href="/2022/leetcode-001/"/>
      <url>/2022/leetcode-001/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a class="btn-beautify blue larger" href="https://leetcode-cn.com/problems/two-sum/"   title="题目祥见此"><i class="far fa-hand-point-right"></i><span>题目祥见此</span></a><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Map是一组键值对的结构，具有极快的查找速度。<br>举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array。<br>如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;Michael&#x27;</span>, <span class="number">95</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>], [<span class="string">&#x27;Tracy&#x27;</span>, <span class="number">85</span>]]);</span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;Michael&#x27;</span>); <span class="comment">// 95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">59</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 是否存在key &#x27;Adam&#x27;: true</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 67</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 删除key &#x27;Adam&#x27;</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()    <span class="comment">// 新建一个Map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> a = target - nums[i]</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">has</span>(a)) &#123;    <span class="comment">// 判断减去后的值是否在map里</span></span><br><span class="line">            <span class="keyword">return</span> [map.<span class="title function_">get</span>(a),i]   <span class="comment">// 在的话就把map里的这个数的值=的索引值和当前i的索引值返回</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.<span class="title function_">set</span>(nums[i],i)  <span class="comment">// 否则把这次的i值存入map里</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>[]  <span class="comment">// 啥值没有，返回空</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>暴力遍历，两个for循环，不用多说了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 设置一个差值</span></span><br><span class="line">        <span class="keyword">let</span> number = []</span><br><span class="line">        <span class="keyword">let</span> dif = target - nums[i]</span><br><span class="line">        <span class="comment">// 再在剩下的数中循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] === dif) &#123;</span><br><span class="line">                number.<span class="title function_">push</span>(i, j)</span><br><span class="line">                <span class="keyword">return</span> number</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []    <span class="comment">// 啥值没有，返回空</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记03</title>
      <link href="/2021/vue-03/"/>
      <url>/2021/vue-03/</url>
      
        <content type="html"><![CDATA[<h2 id="01-绑定样式："><a href="#01-绑定样式：" class="headerlink" title="01.绑定样式："></a>01.绑定样式：</h2><h4 id="1-class样式"><a href="#1-class样式" class="headerlink" title="1.class样式"></a>1.class样式</h4><p>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。<br>字符串写法适用于：类名不确定，要动态获取。<br>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><h4 id="2-style样式"><a href="#2-style样式" class="headerlink" title="2.style样式"></a>2.style样式</h4><p>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。<br>:style&#x3D;”[a,b]”其中a、b是样式对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;moodChange&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span>,</span><br><span class="line">            <span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">            <span class="attr">classArr</span>:[<span class="string">&#x27;stt1&#x27;</span>, <span class="string">&#x27;stt2&#x27;</span>, <span class="string">&#x27;stt3&#x27;</span>],</span><br><span class="line">            <span class="attr">classObj</span>:&#123;</span><br><span class="line">                <span class="attr">stt1</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">stt2</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleObj</span>:&#123;</span><br><span class="line"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line"><span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">styleObj2</span>:&#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">styleArr</span>:[</span><br><span class="line">    &#123;<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">moodChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> moodArr = [<span class="string">&#x27;happy&#x27;</span>, <span class="string">&#x27;sad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span><br><span class="line">            <span class="keyword">let</span> number = moodArr.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">mood</span>)</span><br><span class="line">            <span class="keyword">let</span> i = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">            &#125; <span class="keyword">while</span> (i == number);</span><br><span class="line">            <span class="comment">// 这个循环的意义是使得随机数不会随到它原来的数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">mood</span> = moodArr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="02-条件渲染"><a href="#02-条件渲染" class="headerlink" title="02. 条件渲染"></a>02. 条件渲染</h2><p>条件渲染：</p><h4 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.v-if</h4><p>写法：<br>(1).v-if&#x3D;”表达式”<br>(2).v-else-if&#x3D;”表达式”<br>(3).v-else&#x3D;”表达式”<br>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除。<br>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p><h4 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2.v-show"></a>2.v-show</h4><p>写法：v-show&#x3D;”表达式”<br>适用于：切换频率较高的场景。<br>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p><h4 id="3-备注："><a href="#3-备注：" class="headerlink" title="3.备注："></a>3.备注：</h4><p>使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;你好, &#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;你好, &#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 3&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>123<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span>,</span><br><span class="line">            <span class="attr">n</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="03-列表渲染"><a href="#03-列表渲染" class="headerlink" title="03.列表渲染"></a>03.列表渲染</h2><p>v-for指令:<br>1.用于展示列表数据<br>2.语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”<br>3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">persons</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;19&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span>&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">car</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span><br><span class="line"><span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">            <span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">ript&gt;</span><br></pre></td></tr></table></figure><h2 id="04-Key的作用"><a href="#04-Key的作用" class="headerlink" title="04.Key的作用"></a>04.Key的作用</h2><p>面试题：react、vue中的key有什么作用？（key的内部原理）</p><h4 id="1-虚拟DOM中key的作用："><a href="#1-虚拟DOM中key的作用：" class="headerlink" title="1.虚拟DOM中key的作用："></a>1.虚拟DOM中key的作用：</h4><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】,<br>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><h4 id="2-对比规则："><a href="#2-对比规则：" class="headerlink" title="2.对比规则："></a>2.对比规则：</h4><p>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！<br>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。<br>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key<br>创建新的真实DOM，随后渲染到到页面。</p><h4 id="3-用index作为key可能会引发的问题："><a href="#3-用index作为key可能会引发的问题：" class="headerlink" title="3.用index作为key可能会引发的问题："></a>3.用index作为key可能会引发的问题：</h4><p>1.若对数据进行：逆序添加、逆序删除等破坏顺序操作:<br>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。<br>1.如果结构中还包含输入类的DOM：<br>会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p><h4 id="4-开发中如何选择key"><a href="#4-开发中如何选择key" class="headerlink" title="4.开发中如何选择key?:"></a>4.开发中如何选择key?:</h4><p>1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。<br>2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，<br>使用index作为key是没有问题的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">persons</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;19&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>, <span class="attr">age</span>:<span class="string">&#x27;40&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记02</title>
      <link href="/2021/vue-02/"/>
      <url>/2021/vue-02/</url>
      
        <content type="html"><![CDATA[<h2 id="01-事件的基本使用"><a href="#01-事件的基本使用" class="headerlink" title="01.事件的基本使用"></a>01.事件的基本使用</h2><p>事件的基本使用：<br>    1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；<br>    2.事件的回调需要配置在methods对象中，最终会在vm上；<br>    3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；<br>    4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；<br>    5.@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2(66,$event)&quot;</span>&gt;</span>点我提示信息(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意简写 v-on 成 @ 后不用加 : --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showInfo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;提示信息出来了&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">showInfo2</span>(<span class="params">number,event</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(number,event)</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;传参是&#x27;</span>+number)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="02-事件修饰符"><a href="#02-事件修饰符" class="headerlink" title="02.事件修饰符"></a>02.事件修饰符</h2><p>Vue中的事件修饰符：<br>1.prevent：阻止默认事件（常用）；<br>2.stop：阻止事件冒泡（常用）；<br>3.once：事件只触发一次（常用）；<br>4.capture：使用事件的捕获模式；<br>5.self：只有event.target是当前操作的元素时才触发事件；<br>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://stt.st&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(阻止默认事件)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组织事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(阻止冒泡)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件触发一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(事件触发一次)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;提示信息出来了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="03-键盘事件"><a href="#03-键盘事件" class="headerlink" title="03.键盘事件"></a>03.键盘事件</h2><p>1.Vue中常用的按键别名：<br>    回车 &#x3D;&gt; enter<br>    删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)<br>    退出 &#x3D;&gt; esc<br>    空格 &#x3D;&gt; space<br>    换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)<br>    上 &#x3D;&gt; up<br>    下 &#x3D;&gt; down<br>    左 &#x3D;&gt; left<br>    右 &#x3D;&gt; right<br>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）<br>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta<br>            (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br>            (2).配合keydown使用：正常触发事件。<br>4.也可以使用keyCode去指定具体的按键（不推荐）<br>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="comment">// if (e.keyCode !== 13) return </span></span><br><span class="line">            <span class="comment">// console.log(e.target.value);</span></span><br><span class="line">            <span class="comment">// console.log(e.key, e.keyCode);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="04-计算属性"><a href="#04-计算属性" class="headerlink" title="04.计算属性"></a>04.计算属性</h2><p>计算属性：<br>1.定义：要用的属性不存在，要通过已有属性计算得来。<br>2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。<br>3.get函数什么时候执行？<br>    (1).初次读取时会执行一次。<br>    (2).当依赖的数据发生改变时会被再次调用。<br>4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。<br>5.备注：<br>    1.计算属性最终会出现在vm上，直接读取使用即可。<br>    2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fullName是计算属性，有缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="attr">fullName</span>:&#123;</span><br><span class="line">            <span class="comment">// get的作用是当有人读取fullName值时，get就会被调用，且返回值就为fullName的值</span></span><br><span class="line">            <span class="comment">// get什么时候会被调用？(因为计算属性有缓存)    1、初次读取时 2、get所依赖的数据发生改变时</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get了&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// set什么时候会被调用？    1、当 fullName 被修改时</span></span><br><span class="line">            <span class="title function_">set</span>(<span class="params">value</span>)&#123; <span class="comment">// 这里的value就是fullName被修改的值</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value);</span><br><span class="line">                <span class="keyword">let</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简写方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get了&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    <span class="comment">// 这种简写方法只有get, 所以不能修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="05-天气案例"><a href="#05-天气案例" class="headerlink" title="05.天气案例"></a>05.天气案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>修改天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">info</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;寒冷&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isHot</span>=!<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="06-监视属性"><a href="#06-监视属性" class="headerlink" title="06.监视属性"></a>06.监视属性</h2><p>监视属性watch：<br>    1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作<br>    2.监视的属性必须存在，才能进行监视！！<br>    3.监视的两种写法：<br>        (1).new Vue时传入watch配置<br>        (2).通过vm.$watch监视</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// watch: &#123;</span></span><br><span class="line">    <span class="comment">//     isHot:&#123;</span></span><br><span class="line">    <span class="comment">//         immediate:true,</span></span><br><span class="line">    <span class="comment">//         // handler什么时候被调用？  当isHot发生改变时</span></span><br><span class="line">    <span class="comment">//         handler(newValue, oldValue)&#123;</span></span><br><span class="line">    <span class="comment">//             console.log(&#x27;isHot被修改了&#x27;, &#x27;修改后:&#x27; + newValue + &#x27;修改前:&#x27; + oldValue);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"><span class="comment">// 以上是在开始new Vue时传入watch的</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;     <span class="comment">// 另一种写法</span></span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// handler什么时候被调用？  当isHot发生改变时</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, <span class="string">&#x27;修改后:&#x27;</span> + newValue + <span class="string">&#x27;修改前:&#x27;</span> + oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="07深度监视"><a href="#07深度监视" class="headerlink" title="07深度监视"></a>07深度监视</h2><p>深度监视：<br>        (1).Vue中的watch默认不监测对象内部值的改变（一层）。<br>        (2).配置deep:true可以监测对象内部值改变（多层）。<br>备注：<br>        (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！<br>        (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><figure class="highlight javascript"><figcaption><span>Vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">isHot</span>:&#123;</span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// handler什么时候被调用？  当isHot发生改变时</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, <span class="string">&#x27;修改后:&#x27;</span> + newValue + <span class="string">&#x27;修改前:&#x27;</span> + oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">number</span>:&#123;</span><br><span class="line">        <span class="attr">deep</span>:<span class="literal">true</span>,  <span class="comment">// 只有加了这个才能监视到number里面的改变</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handler被改变了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记01</title>
      <link href="/2021/vue-01/"/>
      <url>/2021/vue-01/</url>
      
        <content type="html"><![CDATA[<h2 id="01-初识Vue"><a href="#01-初识Vue" class="headerlink" title="01.初识Vue"></a>01.初识Vue</h2><p>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；<br>2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue法；<br>3.root容器里的代码被称为【Vue模板】；<br>4.Vue实例和容器是一一对应的；<br>5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；<br>6.中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；<br>7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；<br>创建<code>root容器</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>Vue实例</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">// el 用于指定当前Vue实例为哪个容器服务，值通常为CSS选择器字符串</span></span><br><span class="line">    <span class="attr">data</span>:&#123;  <span class="comment">// data中用于存储数据，数据供el指定的容器所使用</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;world&#x27;</span>   <span class="comment">// 值我们暂时写成一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="02-Vue模板语法"><a href="#02-Vue模板语法" class="headerlink" title="02.Vue模板语法"></a>02.Vue模板语法</h2><p>Vue模板语法有2大类：</p><h4 id="1-插值语法："><a href="#1-插值语法：" class="headerlink" title="1.插值语法："></a>1.插值语法：</h4><p>功能：用于解析标签体内容。<br>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</p><h4 id="2-指令语法："><a href="#2-指令语法：" class="headerlink" title="2.指令语法："></a>2.指令语法：</h4><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。<br>举例：v-bind:href&#x3D;”xxx” 或  简写为 :href&#x3D;”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。<br>备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-bind:x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>我是&#123;&#123;link&#125;&#125;1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>我是链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 此处用了v-bind的略写</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="03-数据绑定"><a href="#03-数据绑定" class="headerlink" title="03.数据绑定"></a>03.数据绑定</h2><p>Vue中有2种数据绑定的方式：<br>1.单向绑定(v-bind)：数据只能从data流向页面。<br>2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。<br>备注：<br>    1.双向绑定一般都应用在表单类元素上（如：input、select等）<br>    2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    单项数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    双向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="04-el和data的两种写法"><a href="#04-el和data的两种写法" class="headerlink" title="04.el和data的两种写法"></a>04.el和data的两种写法</h2><p>第一种el和第一种data(对象式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第二种el和第一种data(对象式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.$mount(<span class="string">&#x27;#root&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一种el和第二种data(函数式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种data写法   (函数式写法)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Micheal&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="05-MVVM"><a href="#05-MVVM" class="headerlink" title="05.MVVM"></a>05.MVVM</h2><p>MVVM模型<br>   M：模型(Model) ：data中的数据<br>   V：视图(View) ：模板代码<br>   VM：视图模型(ViewModel)：Vue实例<br>观察发现：<br>1.data中所有的属性，最后都出现在了vm身上。<br>2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p><h2 id="06-Object-defineProperty"><a href="#06-Object-defineProperty" class="headerlink" title="06.Object.defineProperty"></a>06.Object.defineProperty</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;michael&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line"><span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="line"><span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="line"><span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"><span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> number   <span class="comment">// 只有被读取时才会返回number，这样可以使number实时被访问</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性,且值是&#x27;</span>,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="07-数据代理"><a href="#07-数据代理" class="headerlink" title="07.数据代理"></a>07.数据代理</h2><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line">        </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        obj.<span class="property">x</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="08-Vue中的数据代理"><a href="#08-Vue中的数据代理" class="headerlink" title="08.Vue中的数据代理"></a>08.Vue中的数据代理</h2><p>1.Vue中的数据代理：<br>    通过vm对象来代理data对象中属性的操作（读&#x2F;写）<br>2.Vue中数据代理的好处：<br>    更加方便的操作data中的数据<br>3.基本原理：<br>    通过Object.defineProperty()把data对象中所有属性添加到vm上。<br>    为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。<br>    在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>名字:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄:&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Micheal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统基本概念</title>
      <link href="/2021/database-1/"/>
      <url>/2021/database-1/</url>
      
        <content type="html"><![CDATA[<h2 id="01-怎么理解数据库？"><a href="#01-怎么理解数据库？" class="headerlink" title="01 怎么理解数据库？"></a>01 怎么理解数据库？</h2><p>简单而言，数据库【DataBase】即存放数据的仓库。一般工程情况下，数据库为关系数据库，可简单认为是一张张有关联关系的表【Table】的集合。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/table%E7%9A%84%E6%9E%84%E6%88%90.jpg" alt="table的构成.jpg"></p><h2 id="02-数据库系统的组成？"><a href="#02-数据库系统的组成？" class="headerlink" title="02 数据库系统的组成？"></a>02 数据库系统的组成？</h2><p>从本质上来讲，数据库系统是为了外部的人服务的，即通过应用程序来实现价值的。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%9E%84%E6%88%90.jpg" alt="数据库系统构成.jpg"></p><h2 id="03-数据库语言如何作用？"><a href="#03-数据库语言如何作用？" class="headerlink" title="03 数据库语言如何作用？"></a>03 数据库语言如何作用？</h2><p>一条数据库语言语句相当于一条或者多条高级语言语句；数据库语言可以嵌入高级语言中使用。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E4%BD%9C%E7%94%A8.jpg" alt="数据库系统作用.jpg"></p><h2 id="04-数据库系统标准结构？"><a href="#04-数据库系统标准结构？" class="headerlink" title="04 数据库系统标准结构？"></a>04 数据库系统标准结构？</h2><p>数据库的三级模式按照外中里三层化分为外模式、（概念）模式、内模式，其中模式二字也可换为视图。模式和视图都可理解为数据的表现。<br>外模式为应用用户所看到和操作的数据的结构描述，是片面以及不完整的；（概念）模式为全局的数据结构描述，有着数据整体的本质关系；内模式是数据存储方面的结构描述。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F.jpg" alt="数据库三级模式.jpg"><br>两层映像的作用其实都是将数据的概念模式（或者说视图），由概念往外或者往内转换，这是一个比较好理解的点，因为一个概念是非常不方便操作的。<br>所以对外转换（E-C mapping）便于用户观察和使用；对内转换（C-I mapping）便于计算机存储和处理。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E4%B8%A4%E5%B1%82%E6%98%A0%E5%83%8F.jpg" alt="两层映像.jpg"></p><h2 id="05-标准结构的意义？"><a href="#05-标准结构的意义？" class="headerlink" title="05 标准结构的意义？"></a>05 标准结构的意义？</h2><p>数据库存在的意义本质上都是为了对外使用，所以尽量要使对外使用（即应用程序）相对稳定。所以当概念模式以及内部模式有变化时，都可以通过改变E-C或者C-I mapping来保证不需要改变外部模式。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%A0%87%E5%87%86%E7%BB%93%E6%9E%84%E7%9A%84%E4%BD%9C%E7%94%A8.jpg" alt="标准结构的作用.jpg"></p><h2 id="06-数据模型和模式的关系？"><a href="#06-数据模型和模式的关系？" class="headerlink" title="06 数据模型和模式的关系？"></a>06 数据模型和模式的关系？</h2><p>数据模型，是一种对于模式描述统一的模型，包括：数据结构（模式）、操作和约束。<br>以关系模型为例，所有模式可以抽象化为一张张表的形式（即数据结构）。数据模型是模式结构的抽象，模式是数据本身结构形式的抽象。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg" alt="数据模型.jpg"></p><h2 id="07-数据模型的三大表现形式？"><a href="#07-数据模型的三大表现形式？" class="headerlink" title="07 数据模型的三大表现形式？"></a>07 数据模型的三大表现形式？</h2><p>主要学习最为经典的关系数据模型。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg" alt="三大经典数据模型.jpg"></p><h2 id="08-关系是什么？"><a href="#08-关系是什么？" class="headerlink" title="08 关系是什么？"></a>08 关系是什么？</h2><p>既然我们学的是关系数据模型，那么就应该搞清楚关系是什么。关系其实就是一种规范化的二维表格。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.jpg" alt="表的结构.jpg"></p><h2 id="09-域和笛卡尔积？"><a href="#09-域和笛卡尔积？" class="headerlink" title="09 域和笛卡尔积？"></a>09 域和笛卡尔积？</h2><p>域，是一组相同数据属性的数据集合，给一个命名就是属性。<br>基数，就是这个域下的元素的个数。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E5%9F%9F.jpg" alt="域.jpg"><br>笛卡尔积，为一组域（多个属性）的所有组合。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF.jpg" alt="笛卡尔积.jpg"><br>关系的严格定义，就是笛卡尔积中的有意义的元素。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E5%85%B3%E7%B3%BB.jpg" alt="关系.jpg"></p><h2 id="10-关系与关系模型？"><a href="#10-关系与关系模型？" class="headerlink" title="10 关系与关系模型？"></a>10 关系与关系模型？</h2><p>关系模式写法上为是只记属性，而关系写法上包含了所有数据的值。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.jpg" alt="关系模型.jpg"><br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E6%A8%A1%E5%9E%8B.jpg" alt="模型.jpg"></p><h2 id="11-关系的特性？"><a href="#11-关系的特性？" class="headerlink" title="11 关系的特性？"></a>11 关系的特性？</h2><ol><li>关系的列是同质，即列中分量来自于同一域，属于同一类型的数据。</li><li>列位置互换性，行位置互换性，关系不是以位置而区分的。</li><li>关系两个元组不能相同，因为关系是数学模型，集合中不能有两个相同元素。（现实中表可以）</li><li>属性不可分性（关系第一范式。）</li></ol><p><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.jpg" alt="第一范式.jpg"></p><h2 id="12-候选码、主码和主属性关系？"><a href="#12-候选码、主码和主属性关系？" class="headerlink" title="12 候选码、主码和主属性关系？"></a>12 候选码、主码和主属性关系？</h2><p>候选码有多个，主码为候选码中的一个，主属性是所有候选码包含的属性，可以是多个属性组合。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E5%80%99%E9%80%89%E7%A0%81.jpg" alt="候选码.jpg"><br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E4%B8%BB%E7%A0%81.jpg" alt="主码.jpg"><br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E4%B8%BB%E5%B1%9E%E6%80%A7.jpg" alt="主属性.jpg"></p><h2 id="13-外码是什么？"><a href="#13-外码是什么？" class="headerlink" title="13 外码是什么？"></a>13 外码是什么？</h2><p>一个非常好理解的概念。<br><img src="https://img.lbwnb.vip/2021/11/2021-11-15/%E5%A4%96%E7%A0%81.jpg" alt="外码.jpg"></p><h2 id="14-关系模型完整性？"><a href="#14-关系模型完整性？" class="headerlink" title="14 关系模型完整性？"></a>14 关系模型完整性？</h2><p>实体完整性：主码不能为空值。<br>参照完整性：关系中一个外码与另一个关系中主码一一对应，则不能出现不存在对应的情况，可以为空值。<br>用户自定义完整性：用户自己设定的完整性规则。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call()、apply()、bind() 的用法</title>
      <link href="/2021/js-call-apply-bind/"/>
      <url>/2021/js-call-apply-bind/</url>
      
        <content type="html"><![CDATA[<p>其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！</p><p>先看明白下面：</p><p><strong>例 1</strong></p><p><img src="https://vip2.loli.io/2022/03/04/nGdPUj6JD8Etu5R.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">objAge</span>;  <span class="comment">// 17</span></span><br><span class="line">obj.<span class="title function_">myFun</span>()  <span class="comment">// 小张年龄 undefined</span></span><br></pre></td></tr></table></figure><p><strong>例 2</strong></p><p><img src="https://vip1.loli.io/2022/03/04/Fx1ILvmXjZHWBSd.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">shows</span>()  <span class="comment">// 盲僧　</span></span><br></pre></td></tr></table></figure><p>比较一下这两者 this 的差别，第一个打印里面的 this 指向 obj，第二个全局声明的 shows() 函数 this 是 window ；</p><p><strong>1，call()、apply()、bind() 都是用来重定义 this 这个对象的！</strong></p><p>如：</p><p><img src="https://vip1.loli.io/2022/03/04/JcfeP1RZCEVso2v.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">call</span>(db)；　　　　<span class="comment">// 德玛年龄 99</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">apply</span>(db);　　　 <span class="comment">// 德玛年龄 99</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db)();　　　<span class="comment">// 德玛年龄 99</span></span><br></pre></td></tr></table></figure><p>以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！</p><p>由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。</p><p><strong>2，对比call 、bind 、 apply 传参情况下</strong></p><p><img src="https://vip1.loli.io/2022/03/04/tmfLVEY9sUAr6NR.png" alt="img"></p><p>　</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">call</span>(db,<span class="string">&#x27;成都&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>)；　　　　 <span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">apply</span>(db,[<span class="string">&#x27;成都&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>]);      <span class="comment">// 德玛 年龄 99  来自 成都去往上海  </span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db,<span class="string">&#x27;成都&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>)();       <span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db,[<span class="string">&#x27;成都&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>])();　　 <span class="comment">// 德玛 年龄 99  来自 成都, 上海去往 undefined</span></span><br></pre></td></tr></table></figure><p>微妙的差距！</p><p>从上面四个结果不难看出:</p><p>call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><p>call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 **obj.myFun.call(db,’成都’, … ,’string’ )**。</p><p>apply 的所有参数都必须放在一个数组里面传进去 **obj.myFun.apply(db,[‘成都’, …, ‘string’ ])**。</p><p>bind 除了返回是函数以外，它 的参数和 call 一样。</p><p>当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！</p><p><code>作者：小莫_yu</code><br><code>链接：https://www.cnblogs.com/Shd-Study/p/6560808.html</code><br><code>来源：博客园</code></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的instanceof到底是有多坑？</title>
      <link href="/2021/js-instanceof/"/>
      <url>/2021/js-instanceof/</url>
      
        <content type="html"><![CDATA[<p><strong>instanceof填坑</strong></p><p>说instanceof就不得不顺带说一下typeof，请跟着。</p><hr><p><strong>typeof</strong></p><blockquote><p>typeof操作符返回一个字符串，表示未经计算的操作数的类型。</p></blockquote><p>就这么几种类型：number、boolean、string、object、undefined、function、symbol。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typeof 1 // &quot;number&quot;</span><br><span class="line">typeof &#x27;1&#x27; // &quot;string&quot;</span><br><span class="line">typeof true // &quot;boolean&quot;</span><br><span class="line">typeof Symbol(1) // &quot;symbol&quot;</span><br><span class="line">typeof &#123;&#125; // &quot;object&quot;</span><br><span class="line">typeof [] // &quot;object&quot;，小坑</span><br><span class="line">typeof function()&#123;&#125; // &quot;function&quot;</span><br><span class="line">typeof Symbol(1) // &quot;symbol&quot;</span><br><span class="line">typeof undefined // &quot;undefined&quot;</span><br><span class="line">typeof null // &quot;object&quot;，出名的坑</span><br></pre></td></tr></table></figure><p>对于null-&gt;”object”的问题，仅仅typeof无解，记住有这么个坑即可。</p><p>而关于array-&gt;”object”的问题，建议使用：<code>Array.isArray([]) // true</code>来判断即可。</p><hr><p><strong>instanceof</strong></p><blockquote><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p></blockquote><p>涉及的构造函数有这些基础类型：String、Number、Boolean、Undefined、Null、Symbol；</p><p>复杂类型：Array，Object；</p><p>其他类型：Function、RegExp、Date。</p><p>语法：[对象] instanceof [构造函数]，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let obj = new Object()</span><br><span class="line">obj instanceof Object // true</span><br></pre></td></tr></table></figure><p>注意左侧必须是对象（object），如果不是，直接返回false，具体见基础类型。</p><hr><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let num = 1</span><br><span class="line">num instanceof Number // false</span><br><span class="line"></span><br><span class="line">num = new Number(1)</span><br><span class="line">num instanceof Number // true</span><br></pre></td></tr></table></figure><p>明明都是num，而且都是1，只是因为第一个不是对象，是基本类型，所以直接返回false，而第二个是封装成对象，所以true。</p><p>这里要严格注意这个问题，有些说法是检测目标的<code>__proto__</code>与构造函数的<code>prototype</code>相同即返回true，这是不严谨的，检测的一定要是对象才行，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let num = 1</span><br><span class="line">num.__proto__ === Number.prototype // true</span><br><span class="line">num instanceof Number // false</span><br><span class="line"></span><br><span class="line">num = new Number(1)</span><br><span class="line">num.__proto__ === Number.prototype // true</span><br><span class="line">num instanceof Number // true</span><br><span class="line"></span><br><span class="line">num.__proto__ === (new Number(1)).__proto__ // true</span><br></pre></td></tr></table></figure><p>上面例子可以看出，1与new Number(1)几乎是一样的，只是区别在于是否封装成对象，所以instanceof的结果是不同的。</p><p>string、boolean等，这些基础类型一样的。</p><blockquote><p>new String(1)与String(1)是不同的，new是封装成对象，而没有new的只是基础类型转换，还是基础类型，如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new String(1) // String &#123;&quot;1&quot;&#125;</span><br><span class="line">String(1) // &quot;1&quot;</span><br></pre></td></tr></table></figure><p>其他基础类型一样的。</p><p>复杂类型，比如数组与对象，甚至函数等，与基础类型不同。</p><hr><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = []</span><br><span class="line">arr instanceof Array // true</span><br><span class="line">arr instanceof Object // true</span><br><span class="line">Array.isArray(arr) // true</span><br></pre></td></tr></table></figure><p>首先，字面量是直接生成构造函数的，所以不会像基本类型一样两种情况，这个可以放心用。</p><p>但是上面那个问题，当然，基础类型也会有这个问题，就是与Object对比。没办法，Object在原型链的上层，所以都会返回true，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(new Number(1)) instanceof Object // true</span><br></pre></td></tr></table></figure><p>由于从下往上，比如你判断是Number，那就没必要判断是不是Object了，因为已经是Number了……</p><p>Array一个道理，不过还是建议使用isArray来专门处理数组判断。</p><p><code>new Object()</code>与<code>&#123;&#125;</code>就不介绍了，一样的情况。</p><hr><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let reg = new RegExp(//)</span><br><span class="line">reg instanceof RegExp // true</span><br><span class="line">reg instanceof Object // true</span><br><span class="line"></span><br><span class="line">let date = new Date()</span><br><span class="line">date instanceof Date // true</span><br><span class="line">date instanceof Object // true</span><br></pre></td></tr></table></figure><p>除了Function，都一样，具体Function如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function A() &#123;&#125;</span><br><span class="line">let a = new A()</span><br><span class="line">a instanceof Function // false</span><br><span class="line">a instanceof Object // true</span><br><span class="line">A instanceof Function // true</span><br></pre></td></tr></table></figure><p>这里要注意，<code>function A() &#123;&#125;</code>相当于<code>let A; A = function() &#123;&#125;</code>，然后分析：</p><ol><li>a是new出来，所以是经过构造，因此已经是对象，不再是函数，所以false。</li><li>a是经过构造的对象，返回ture没问题。</li><li>如上所述，A是个函数，因此没什么概念上的问题。但是要知道<code>A.__proto__</code>即<code>Function.prototype</code>是<code>ƒ () &#123; [native code] &#125;</code>，这是与object以后处于原型链上层的存在，而且与object平级，检测如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;&#125;</span><br><span class="line">obj.__proto__ // &#123;constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …&#125;</span><br><span class="line">obj.__proto__.prototype // undefined</span><br><span class="line"></span><br><span class="line">let A = function() &#123;&#125;</span><br><span class="line">A.__proto__ // ƒ () &#123; [native code] &#125;</span><br><span class="line">A.__proto__.prototype // undefined</span><br></pre></td></tr></table></figure><p><code>作者：前端绅士</code><br><code>链接：https://www.imooc.com/article/69870</code><br><code>来源：慕课网</code></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript笔试查漏补缺</title>
      <link href="/2021/js02/"/>
      <url>/2021/js02/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS选择器优先级"><a href="#1-CSS选择器优先级" class="headerlink" title="1.CSS选择器优先级"></a>1.CSS选择器优先级</h2><p>!important大于一切，内联样式其次</p><p><img src="https://img.lbwnb.vip/2022/03/2022-03-16/20201005174704418.png"></p><h2 id="2-Array-filter"><a href="#2-Array-filter" class="headerlink" title="2.Array.filter()"></a>2.Array.filter()</h2><blockquote><p>array.filter(function(currentValue,index,arr), thisValue)</p></blockquote><h2 id="3-‘1’-‘2’-‘3’-map-parseInt"><a href="#3-‘1’-‘2’-‘3’-map-parseInt" class="headerlink" title="3.[‘1’, ‘2’, ‘3’].map(parseInt)()"></a>3.[‘1’, ‘2’, ‘3’].map(parseInt)()</h2><h4 id="3-1map"><a href="#3-1map" class="headerlink" title="3.1map()"></a>3.1map()</h4><blockquote><p>array.map(function(currentValue,index,arr), thisValue)</p></blockquote><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p><strong>注意：</strong> map() 不会对空数组进行检测。</p><p><strong>注意：</strong> map() 不会改变原始数组。</p><h4 id="3-2parseInt"><a href="#3-2parseInt" class="headerlink" title="3.2parseInt()"></a>3.2parseInt()</h4><blockquote><p>parseInt(string, radix)</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">string</td><td align="left">必需。要被解析的字符串。</td></tr><tr><td align="left">radix</td><td align="left">可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</td></tr></tbody></table><h2 id="4-Math方法"><a href="#4-Math方法" class="headerlink" title="4.Math方法"></a>4.Math方法</h2><p>Math.abs(x) 返回x的绝对值</p><p>Math.pow(x, power) 返回x的power次幂</p><p>Math.pow(…nums) 返回nums中每个数平方和的平方根</p><p>Math.sign(x) 返回表示x符号的1、0、-0或-1</p><p>Math.trunc(x) 返回x的整数部分，删除所有小数</p><p>Math.sqrt(x) 返回x的平方根</p><p>Math.cbrt(x) 返回x的立方根</p><h2 id="5-1-gt-gt-gt-32的数值为2-32-1"><a href="#5-1-gt-gt-gt-32的数值为2-32-1" class="headerlink" title="5.-1 &gt;&gt;&gt; 32的数值为2^32-1"></a>5.-1 &gt;&gt;&gt; 32的数值为2^32-1</h2><p>“&gt;&gt;&gt;”运算符执行无符号右移位运算。它把无符号的 32 位整数所有数位整体右移。</p><p>对于无符号数或正数右移运算，无符号右移与有符号右移运算的结果是相同的。</p><p>对于负数来说，无符号右移将使用0来填充所有的空位，同时会把负数作为正数来处理，所得结果会非常大，完成右移操作后，最高位为1代表负数。</p><p>“&gt;&gt;”运算符为有符号，需要负数考虑第一位为1。</p><h2 id="6-块级元素"><a href="#6-块级元素" class="headerlink" title="6.块级元素"></a>6.块级元素</h2><p><img src="https://img.lbwnb.vip/2022/03/2022-03-16/20201005174214131.png"></p><h2 id="7-CSS伪类选择器"><a href="#7-CSS伪类选择器" class="headerlink" title="7.CSS伪类选择器"></a>7.CSS伪类选择器</h2><p><img src="https://img.lbwnb.vip/2022/03/2022-03-16/20201005192530804.png"></p><p><img src="https://img.lbwnb.vip/2022/03/2022-03-16/20201005192530803.png"></p><h2 id="8-DOMContentLoaded和load事件的区别"><a href="#8-DOMContentLoaded和load事件的区别" class="headerlink" title="8.DOMContentLoaded和load事件的区别"></a>8.DOMContentLoaded和load事件的区别</h2><ol><li><p>DOMContentLoaded事件</p><p>页面dom加载完成触发，无需等待后续图片等资源</p></li><li><p>load事件</p><p>整个页面所有资源加载完成之后触发；load一定在DOMContentLoaded之后触发</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript面试笔记题</title>
      <link href="/2021/js01/"/>
      <url>/2021/js01/</url>
      
        <content type="html"><![CDATA[<h2 id="01-延迟加载JS的方法"><a href="#01-延迟加载JS的方法" class="headerlink" title="01.延迟加载JS的方法"></a>01.延迟加载JS的方法</h2><h4 id="1-defer属性"><a href="#1-defer属性" class="headerlink" title="1.defer属性"></a>1.defer属性</h4><p>用途：在<code>&lt;script&gt;</code>元素中设置defer属性，等html全部解析完成才会执行js代码，按顺序执行js脚本。</p><h4 id="2-async属性"><a href="#2-async属性" class="headerlink" title="2.async属性"></a>2.async属性</h4><p>async是和html解析同步的，不是顺次执行js脚本（谁先加载完谁先执行）。</p><h4 id="3-动态创建DOM"><a href="#3-动态创建DOM" class="headerlink" title="3.动态创建DOM"></a>3.动态创建DOM</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">downloadJSAtOnload</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">   element.<span class="property">src</span> = <span class="string">&quot;defer.js&quot;</span>;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">addEventListener</span>) <span class="comment">//添加监听事件</span></span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,downloadJSAtOnload, <span class="literal">false</span>); <span class="comment">//事件在冒泡阶段执行</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">attachEvent</span>)</span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;onload&quot;</span>,downloadJSAtOnload);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">onload</span> = downloadJSAtOnload;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-Jquery的getScript-方法"><a href="#4-Jquery的getScript-方法" class="headerlink" title="4.Jquery的getScript()方法"></a>4.Jquery的getScript()方法</h4><h4 id="5-setTimeout延迟方法的加载时间"><a href="#5-setTimeout延迟方法的加载时间" class="headerlink" title="5.setTimeout延迟方法的加载时间"></a>5.setTimeout延迟方法的加载时间</h4><h4 id="6-让js最后加载"><a href="#6-让js最后加载" class="headerlink" title="6.让js最后加载"></a>6.让js最后加载</h4><h2 id="02-JS的基本数据类型有哪些"><a href="#02-JS的基本数据类型有哪些" class="headerlink" title="02.JS的基本数据类型有哪些"></a>02.JS的基本数据类型有哪些</h2><p>简单数据类型有五种：Undefined、Null、Number、String、Boolean、（Symbol）</p><p>引用数据类型：Object、Array、Function</p><p>值得注意的是，typeof undefined —— undefined、typeof null —— object</p><h2 id="03-null和undefined的区别"><a href="#03-null和undefined的区别" class="headerlink" title="03.null和undefined的区别"></a>03.null和undefined的区别</h2><p>null 表示没有对象，表示该函数的参数不是对象；</p><p>undefined 表示一个变量声明了没有初始化（赋值）；</p><p>undefined 不是一个有效的JSON值，但是null是；</p><p>undefined 的类型（typeof）是undefined，</p><p>null 的类型（typeof）是object。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="04-x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#04-x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="04.&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别"></a>04.&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别</h2><h4 id="1-x3D-x3D"><a href="#1-x3D-x3D" class="headerlink" title="1.&#x3D;&#x3D;"></a>1.&#x3D;&#x3D;</h4><p>一边有boolean，先把boolean转化为number再比较；</p><p>一边有字符串，一边为number，先将string转化为number再比较</p><p>NaN不论与什么都是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（<span class="title class_">NaN</span>！=<span class="title class_">NaN</span>）<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-x3D-x3D-x3D"><a href="#2-x3D-x3D-x3D" class="headerlink" title="2.&#x3D;&#x3D;&#x3D;"></a>2.&#x3D;&#x3D;&#x3D;</h4><p>两边不仅值要相同，类型也要相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="05-微任务和宏任务"><a href="#05-微任务和宏任务" class="headerlink" title="05.微任务和宏任务"></a>05.微任务和宏任务</h2><h4 id="1-JS是单线程的语言"><a href="#1-JS是单线程的语言" class="headerlink" title="1.JS是单线程的语言"></a>1.JS是单线程的语言</h4><h4 id="2-JS代码执行流程"><a href="#2-JS代码执行流程" class="headerlink" title="2.JS代码执行流程"></a>2.JS代码执行流程</h4><p>同步代码执行完 &#x3D;&#x3D;&gt; 事件循环。</p><p>同步任务执行完了，才会执行事件循环的内容。</p><h4 id="3-事件循环中包含：微任务、宏任务。"><a href="#3-事件循环中包含：微任务、宏任务。" class="headerlink" title="3.事件循环中包含：微任务、宏任务。"></a>3.事件循环中包含：微任务、宏任务。</h4><p>​宏任务：setTimeout、setInterval、I&#x2F;O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)</p><p>​微任务：Promise.then、Object.observe、MutaionObserver、process.nextTick(Node.js 环境)</p><p><strong>流程：同步 &#x3D;&#x3D;&gt; 事件循环（微任务、宏任务）&#x3D;&#x3D;&gt; 微任务 &#x3D;&#x3D;&gt; DOM渲染 &#x3D;&#x3D;&gt; 宏任务</strong></p><p><img src="https://img.lbwnb.vip/2022/03/2022-03-11/task.png" alt="task"></p><h2 id="06-作用域"><a href="#06-作用域" class="headerlink" title="06.作用域"></a>06.作用域</h2><p>1.除了函数外，JS是没有块级作用域的（严厉批评if语句）。</p><p>2.作用域链：内部可以访问外部的变量，但是外部不能访问内部的变量。</p><p>​注意：如果内部有，优先查找内部，如果内部没有就查找外部的。</p><p>3.注意声明变量是用var还是没有写（没有写就是window.）</p><p>4.注意：JS有变量提升的机制（变量悬挂声明）</p><p>5.优先级：变量声明 &gt; 声明普通函数 &gt; 参数 &gt; 变量提升</p><p>面试时怎么看：</p><p><code>1. 本层作用域有没有此变量（注意变量提升）</code></p><p><code>2. 注意：JS除了函数外没有块级作用域</code></p><p><code>3. 普通声明函数是不看写函数时候的顺序的</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出为 undefined 和 2</span></span><br><span class="line"><span class="title function_">text</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">text</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()) <span class="comment">// 注意这里foo没有括号输出就是函数，而不是2</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="07-JS对象及查找方式"><a href="#07-JS对象及查找方式" class="headerlink" title="07.JS对象及查找方式"></a>07.JS对象及查找方式</h2><p>1.对象是通过new操作符构建出来的，所以对象之间不相等（<code>[1] == [1] // false</code>）；</p><p>2.对象注意：引用类型（引用时是相等的）；</p><p>3.对象的key都是字符串型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">key</span>:a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    <span class="attr">key</span>:b</span><br><span class="line">&#125;</span><br><span class="line">a[b] = <span class="string">&#x27;123&#x27;</span>    <span class="comment">// &#123;[object Object]: &#x27;123&#x27;&#125;</span></span><br><span class="line">a[c] = <span class="string">&#x27;456&#x27;</span>    <span class="comment">// &#123;[object Object]: &#x27;456&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);  <span class="comment">// &#x27;456&#x27;</span></span><br></pre></td></tr></table></figure><p>4.对象如何找属性|方法：原型链</p><p><code>对象本身 ==&gt; 构造函数 ==&gt; 对象原型（构造函数原型）==&gt; 对象上一层原型</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.a = &#x27;这个是Fun函数中添加的&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Fun</span>()</span><br><span class="line"><span class="comment">// obj.__proto__.a = &#x27;这个是对象原型中添加的&#x27;</span></span><br><span class="line"><span class="comment">// Fun.prototype.a = &#x27;这个是Fun的原型中添加的&#x27;</span></span><br><span class="line"><span class="comment">// 上面这两个就是一个东西，所以谁在下面就听谁的</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&#x27;这个是Object原型中添加的&#x27;</span></span><br><span class="line"><span class="comment">// obj.a = &#x27;这个是对象本身添加的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>);</span><br></pre></td></tr></table></figure><h2 id="08-综合一下"><a href="#08-综合一下" class="headerlink" title="08.综合一下"></a>08.综合一下</h2><h4 id="1-函数何时运行"><a href="#1-函数何时运行" class="headerlink" title="1.函数何时运行"></a>1.函数何时运行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun);<span class="comment">// fun() 只打印函数体，不运行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>());<span class="comment">// 123 &#x27;abc&#x27; 会运行里面的代码，然后fun()变成返回值</span></span><br></pre></td></tr></table></figure><h4 id="2-this指向"><a href="#2-this指向" class="headerlink" title="2.this指向"></a>2.this指向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">a = fun<span class="comment">// 把函数体赋值给a</span></span><br><span class="line">b = <span class="title function_">fun</span>()<span class="comment">// 执行fun()，this都是window，b被赋值为window</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>:&#123;</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);<span class="comment">// undefined</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;<span class="comment">// b对象因为b调用的fn函数，this指向b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="property">b</span>.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h4 id="3-综合题"><a href="#3-综合题" class="headerlink" title="3.综合题"></a>3.综合题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)&#125; <span class="comment">// 这行代码不可能运行(因为上一行的声明的存在)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>()       <span class="comment">// 2 </span></span><br><span class="line"><span class="title function_">getName</span>()           <span class="comment">// 4</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>()     <span class="comment">// 1 Foo()会先执行，return this 是window，然后原式就变成window.getName()</span></span><br><span class="line"><span class="title function_">getName</span>()           <span class="comment">// 1 因为上一句，getName()就被替换了成了log(1)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>() <span class="comment">// 3 new Foo() 构造了一个对象，对象.getName()按原型链去找</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getA</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="comment">// let funcA = a.getA</span></span><br><span class="line"><span class="comment">// console.log(funcA())</span></span><br><span class="line"><span class="comment">// this是window，return的是&#x27;Michael1&#x27;</span></span><br><span class="line"><span class="keyword">let</span> funcA = a.<span class="title function_">getA</span>()</span><br><span class="line"><span class="comment">// 输出的this是A对象</span></span><br><span class="line"><span class="comment">// 这一步就把a.getA()执行了，并且将124赋值给funcA</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(funcA)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">length</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">test1</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>() <span class="comment">// 闭包里面this指向的是window </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// obj.test2 = fn 相对于</span></span><br><span class="line">    <span class="comment">// test2:function()&#123;</span></span><br><span class="line">    <span class="comment">//    return this.length</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">test2</span> = fn  <span class="comment">// 这里的this是指obj</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">test1</span>());   <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()===obj.<span class="title function_">test2</span>());    <span class="comment">// false 10===5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">test1</span>()===obj.<span class="title function_">test2</span>()); <span class="comment">// false 10===5</span></span><br></pre></td></tr></table></figure><h2 id="09-判断数据类型方法（以数组为例）"><a href="#09-判断数据类型方法（以数组为例）" class="headerlink" title="09.判断数据类型方法（以数组为例）"></a>09.判断数据类型方法（以数组为例）</h2><h4 id="方式一：typeof-arr-（判断基本类型数据）"><a href="#方式一：typeof-arr-（判断基本类型数据）" class="headerlink" title="方式一：typeof(arr)（判断基本类型数据）"></a>方式一：typeof(arr)（判断基本类型数据）</h4><p>基本类型除了null返回object，均可以返回正确类型。</p><p>引用类型除了function返回function，都返回object。</p><h4 id="方式二：Array-isArray-arr-（只能判断Array数据类型）"><a href="#方式二：Array-isArray-arr-（只能判断Array数据类型）" class="headerlink" title="方式二：Array.isArray(arr)（只能判断Array数据类型）"></a>方式二：Array.isArray(arr)（只能判断Array数据类型）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)</span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="方式三：Object-prototype-toString-call-arr"><a href="#方式三：Object-prototype-toString-call-arr" class="headerlink" title="方式三：Object.prototype.toString.call(arr)"></a>方式三：Object.prototype.toString.call(arr)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr)</span><br><span class="line">&lt; <span class="string">&#x27;[object Array]&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="方式四：instanceof（大坑）"><a href="#方式四：instanceof（大坑）" class="headerlink" title="方式四：instanceof（大坑）"></a>方式四：instanceof（大坑）</h4><p>基本类型要封装成对象才能使用，也同时检测目标的<code>__proto__</code>与构造函数的<code>prototype</code>相同即返回true。</p><p>引用类型可以使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;Michael&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; (<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Michael&#x27;</span>)) <span class="keyword">instanceof</span> <span class="title class_">String</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="方法五：arr-constructor-toString"><a href="#方法五：arr-constructor-toString" class="headerlink" title="方法五：arr.constructor.toString()"></a>方法五：arr.constructor.toString()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr.<span class="property">constructor</span>.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;Array&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="10-数组的slice和splice"><a href="#10-数组的slice和splice" class="headerlink" title="10.数组的slice和splice"></a>10.数组的slice和splice</h2><h4 id="1-array-slice-start-end"><a href="#1-array-slice-start-end" class="headerlink" title="1.array.slice(start,end)"></a>1.array.slice(start,end)</h4><p>slice() 方法以新的数组对象，返回数组中被选中的元素。</p><p>slice() 方法选择从给定的 <em>start</em> 参数开始的元素，并在给定的 <em>end</em> 参数处结束，但不包括。(-1指代码中的Mango)</p><p><strong>注释：</strong>slice() 方法不会改变原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> citrus = fruits.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">// [&quot;Orange&quot;,&quot;Lemon&quot;,&quot;Apple&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="2-array-splice-index-howmany-item1-…-itemX"><a href="#2-array-splice-index-howmany-item1-…-itemX" class="headerlink" title="2.array.splice(index, howmany, item1, ….., itemX)"></a>2.array.splice(index, howmany, item1, ….., itemX)</h4><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>index</em></td><td align="left">必需。整数，指定在什么位置添加&#x2F;删除项目，使用负值指定从数组末尾开始的位置。</td></tr><tr><td align="left"><em>howmany</em></td><td align="left">可选。要删除的项目数。如果设置为 0，则不会删除任何项目。</td></tr><tr><td align="left"><em>item1, …, itemX</em></td><td align="left">可选。要添加到数组中的新项目。</td></tr></tbody></table><p>splice() 方法向&#x2F;从数组添加&#x2F;删除项目，并返回删除的项目。</p><p><strong>注释：</strong>splice() 方法会改变原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Kiwi&quot;</span>);</span><br><span class="line"><span class="comment">// [&#x27;Banana&#x27;, &#x27;Orange&#x27;, &#x27;Lemon&#x27;, &#x27;Kiwi&#x27;, &#x27;Mango&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="11-多维数组最大值组成新数组"><a href="#11-多维数组最大值组成新数组" class="headerlink" title="11.多维数组最大值组成新数组"></a>11.多维数组最大值组成新数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">65</span>,<span class="number">45</span>,<span class="number">12</span>,<span class="number">78</span>],[<span class="number">89</span>,<span class="number">126</span>,<span class="number">456</span>,<span class="number">13223</span>,<span class="number">156</span>,<span class="number">56</span>]]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...element))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h2 id="12-字符串新增方法"><a href="#12-字符串新增方法" class="headerlink" title="12.字符串新增方法"></a>12.字符串新增方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addStr</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我叫&#x27;</span>.<span class="title function_">addStr</span>(<span class="string">&#x27;Michael&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="13-字符串中出现最多字符"><a href="#13-字符串中出现最多字符" class="headerlink" title="13.字符串中出现最多字符"></a>13.字符串中出现最多字符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aaaaaaaaasssssssssssssssffffffffffffffffffffcccccccccccccccccmmmmslpeeeefff&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> char = str.<span class="title function_">charAt</span>(i)</span><br><span class="line">    <span class="keyword">if</span> (obj[char]) &#123;</span><br><span class="line">        obj[char] ++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[char] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] &gt; max) &#123;</span><br><span class="line">        max = obj[key]</span><br><span class="line">        <span class="keyword">var</span> k = key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k + <span class="string">&#x27;:&#x27;</span> + max);</span><br></pre></td></tr></table></figure><h2 id="14-new操作符具体做了什么？"><a href="#14-new操作符具体做了什么？" class="headerlink" title="14.new操作符具体做了什么？"></a>14.new操作符具体做了什么？</h2><p><code>new</code>操作符用于创建一个给定构造函数的实例对象，具体有四个步骤，其手写代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">Fun, ...args</span>)&#123;</span><br><span class="line"><span class="comment">// 1.创建一个新对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 2.新对象的原型指向构造函数的原型对象</span></span><br><span class="line">obj.<span class="property">__proto__</span> = <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 3.将构造函数的this指向新对象</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">Fun</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line"><span class="comment">// 4.根据返回值判断</span></span><br><span class="line"><span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-闭包"><a href="#15-闭包" class="headerlink" title="15.闭包"></a>15.闭包</h2><h4 id="1-闭包是什么"><a href="#1-闭包是什么" class="headerlink" title="1.闭包是什么"></a>1.闭包是什么</h4><blockquote><p>闭包是一个函数加上到创建函数的作用域的连接，闭包“关闭”了函数的自由变量（闭包外面的局部变量不会被回收）。</p></blockquote><h4 id="2-闭包的优点是什么"><a href="#2-闭包的优点是什么" class="headerlink" title="2.闭包的优点是什么"></a>2.闭包的优点是什么</h4><p>​2.1 内部函数可以访问到外部函数的局部变量</p><p>​2.2 闭包可以解决的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(i)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)(i)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-闭包的缺点"><a href="#3-闭包的缺点" class="headerlink" title="3.闭包的缺点"></a>3.闭包的缺点</h4><p>3.1 变量会驻留在内存中，造成内存损耗问题。</p><p>​解决：执行完把闭包函数设置为null</p><p>3.2 内存泄漏（IE低版本）</p><h2 id="16-原型链"><a href="#16-原型链" class="headerlink" title="16.原型链"></a>16.原型链</h2><h4 id="1-原型可以解决什么问题"><a href="#1-原型可以解决什么问题" class="headerlink" title="1.原型可以解决什么问题"></a>1.原型可以解决什么问题</h4><p>对象共享属性和共享方法</p><h4 id="2-谁有原型"><a href="#2-谁有原型" class="headerlink" title="2.谁有原型"></a>2.谁有原型</h4><p>函数拥有：<code>prototype</code></p><p>对象拥有：<code>__proto__</code></p><h4 id="3-对象查找属性或者方法的顺序"><a href="#3-对象查找属性或者方法的顺序" class="headerlink" title="3.对象查找属性或者方法的顺序"></a>3.对象查找属性或者方法的顺序</h4><p>先在自身查找 –&gt; 构造函数查找 –&gt; 对象的原型（构造函数的原型）查找 –&gt; 当前原型</p><h4 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4.原型链"></a>4.原型链</h4><p>​4.1是什么？：就是把原型串联起来</p><p>​4.2原型链的最顶端是null</p><h2 id="17-继承的几种方法"><a href="#17-继承的几种方法" class="headerlink" title="17.继承的几种方法"></a>17.继承的几种方法</h2><h4 id="1-ES6方法"><a href="#1-ES6方法" class="headerlink" title="1.ES6方法"></a>1.ES6方法</h4><p>使用 “extends” 关键字从另一个类继承所有方法。</p><p>使用 “super” 方法调用父级的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()<span class="comment">// 继承</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1,o1.<span class="property">name</span>,o1.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h4 id="2-原型链继承"><a href="#2-原型链继承" class="headerlink" title="2.原型链继承"></a>2.原型链继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2,o2.<span class="property">name</span>,o2.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h4 id="3-构造函数继承"><a href="#3-构造函数继承" class="headerlink" title="3.构造函数继承"></a>3.构造函数继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o3 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3,o3.<span class="property">name</span>,o3.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h4 id="4-组合式继承"><a href="#4-组合式继承" class="headerlink" title="4.组合式继承"></a>4.组合式继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="keyword">let</span> o4 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o4,o4.<span class="property">name</span>,o4.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h2 id="18-call、apply、bind的区别"><a href="#18-call、apply、bind的区别" class="headerlink" title="18.call、apply、bind的区别"></a>18.call、apply、bind的区别</h2><h4 id="共同点：功能一致"><a href="#共同点：功能一致" class="headerlink" title="共同点：功能一致"></a>共同点：功能一致</h4><p>改变this指向，重定义this这个对象的。</p><blockquote><p>语法：函数.call()、函数.apply()、函数.bind()</p></blockquote><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>1.call、apply可以立即执行。bind不会立即执行，因为bind返回的是一个函数需要加入()执行。</p><blockquote><p>要绑定点击啥的函数就只能用bind，因为它返回的是函数</p></blockquote><p>2.参数不同：apply第二个参数是数组。call和bind有多个参数需要挨个写。</p><h2 id="19-深拷贝和浅拷贝"><a href="#19-深拷贝和浅拷贝" class="headerlink" title="19.深拷贝和浅拷贝"></a>19.深拷贝和浅拷贝</h2><p>共同点：复制（我们这里说的深拷贝浅拷贝一般指的是复杂数据类型，一般是数组或对象）</p><p>1.浅拷贝：只复制引用，而未赋值真正的值。（引用地址而不是传值）</p><p>2.深拷贝：复制到的是真正的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><h2 id="20-localStorage、sessionStorage、cookie的区别"><a href="#20-localStorage、sessionStorage、cookie的区别" class="headerlink" title="20.localStorage、sessionStorage、cookie的区别"></a>20.localStorage、sessionStorage、cookie的区别</h2><p>公共点：都在客户端存储数据</p><h4 id="区别：-1"><a href="#区别：-1" class="headerlink" title="区别："></a>区别：</h4><h5 id="1-数据存放有效期"><a href="#1-数据存放有效期" class="headerlink" title="1.数据存放有效期"></a>1.数据存放有效期</h5><p>sessionStorage ：仅在当前浏览器窗口关闭前有效。</p><p>localStorage  ：始终有效，窗口或者浏览器关闭也一直保存，除非用户主动清除，</p><p>cookie ：只在过期时间之前有效，无过期时间则浏览器关闭失效。</p><h5 id="2-存储大小"><a href="#2-存储大小" class="headerlink" title="2.存储大小"></a>2.存储大小</h5><p>cookie不能超过4k。</p><p>localStorage、和sessionStorage存储大小在5m左右。</p><p>（视浏览器而异）</p><h2 id="21-事件冒泡和事件捕获"><a href="#21-事件冒泡和事件捕获" class="headerlink" title="21.事件冒泡和事件捕获"></a>21.事件冒泡和事件捕获</h2><p>js事件的三个阶段分别为：捕获、目标、冒泡 </p><blockquote><p>1.事件捕获：事件由页面元素接收，逐级向下，到具体的元素<br>2.到达目标：具体目标元素接收到事件<br>3.事件冒泡：跟捕获相反，具体元素本身，逐级向上，到页面元素 </p></blockquote><p>addEventListener默认是监听事件冒泡（也就是false），true为事件捕获。</p><p>事件顺序：捕获（先外后里）—&gt; 冒泡（先里后外）</p><p><img src="https://img.lbwnb.vip/2022/03/2022-03-15/event.jpg" alt="event"></p><h2 id="22-防抖与节流"><a href="#22-防抖与节流" class="headerlink" title="22.防抖与节流"></a>22.防抖与节流</h2><h4 id="防抖：用户触发事件过于频繁，只要取最后一次事件操作"><a href="#防抖：用户触发事件过于频繁，只要取最后一次事件操作" class="headerlink" title="防抖：用户触发事件过于频繁，只要取最后一次事件操作"></a>防抖：用户触发事件过于频繁，只要取最后一次事件操作</h4><p>本质上理解就是，在规定时间内同一事件被触发多次就先不执行，有个刷新周期，只有在这个周期里你没有触发，程序才会执行你的最后一个事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="comment">// var t = null</span></span><br><span class="line"><span class="comment">// input.oninput = function()&#123;</span></span><br><span class="line"><span class="comment">//     if (t !== null) &#123;</span></span><br><span class="line"><span class="comment">//         clearTimeout(t)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     t = setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         console.log(this.value);</span></span><br><span class="line"><span class="comment">//     &#125;,1000)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 闭包写法</span></span><br><span class="line">input.<span class="property">oninput</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (t !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(t)</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流：控制高频事件执行次数"><a href="#节流：控制高频事件执行次数" class="headerlink" title="节流：控制高频事件执行次数"></a>节流：控制高频事件执行次数</h4><p>一个事件经常被触发，加定时器使其在固定事件内只能执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let flag = true</span></span><br><span class="line"><span class="comment">// window.onscroll = function () &#123;</span></span><br><span class="line"><span class="comment">//     if(flag)&#123;</span></span><br><span class="line"><span class="comment">//         setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//             console.log(&#x27;节流&#x27;)</span></span><br><span class="line"><span class="comment">//             flag = true</span></span><br><span class="line"><span class="comment">//         &#125;,1000)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     flag = false // 这个内部的flag的意义：使函数在上个周期没执行完时不触发新的事件</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;节流&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">fn</span>()</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-var、let和const"><a href="#23-var、let和const" class="headerlink" title="23.var、let和const"></a>23.var、let和const</h2><p>1.var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</p><p>2.let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</p><p>3.const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</p><h4 id="1-细说一下let"><a href="#1-细说一下let" class="headerlink" title="1.细说一下let"></a>1.细说一下let</h4><h5 id="1-1变量提升-暂时性死区"><a href="#1-1变量提升-暂时性死区" class="headerlink" title="1.1变量提升?暂时性死区!"></a>1.1变量提升?暂时性死区!</h5><blockquote><p>let和 var 的第二点不同是，在变量声明之前就访问变量的话，会直接提示 ReferenceError，而不像 var 那样使用默认值 undefined.</p><p>var 存在变量提升，而 let声明的变量却不存在变量提升(或者说变量提升机制不同)，所以用 let 定义的变量一定要在声明后再使用，否则会报错。</p></blockquote><p><strong>ES6明确规定，如果区块中存在let命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。所以在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;outside&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//Uncaught ReferenceError: a is not defined</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&quot;inside&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前作用域顶部到该变量声明位置中间的部分，都是该let变量的死区，在死区中，禁止访问该变量。由此，我们给出结论，let声明的变量存在变量提升， 但是由于死区我们无法在声明前访问这个变量。</p><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><h5 id="1-2let里不允许重复声明变量"><a href="#1-2let里不允许重复声明变量" class="headerlink" title="1.2let里不允许重复声明变量"></a>1.2let里不允许重复声明变量</h5><h4 id="2-const声明常量"><a href="#2-const声明常量" class="headerlink" title="2.const声明常量"></a>2.const声明常量</h4><p>const 和 let 的作用域是一致的，不同的是 const 变量一旦被赋值，就不能再改变了，但是这并不意味着使用 const 声明的变量本身不可变，只是说它不可被再次赋值了，而且const 声明的变量必须经过<strong>初始化。</strong></p><blockquote><p>复合类型const变量保存的是引用。因为复合类型（如数组和对象）的常量不指向数据，而是指向数据(heap)所在的地址(stack)，所以通过 const 声明的复合类型只能保证其地址引用不变，但不能保证其数据不变。所以将一个对象声明为常量必须非常小心。</p></blockquote><p>简单数据类型（数值，字符串，布尔值）：值保存在变量指向的那个内存地址，因此等同于常量。</p><p>复合类型的数据（对象和数组）：变量指向的是内存地址，保存的是一个指针，const只能保存这个指针地址是固定的，至于他指向的数据结构是不是可变的，就完全不能控制了。</p><h2 id="24-解构赋值的使用"><a href="#24-解构赋值的使用" class="headerlink" title="24.解构赋值的使用"></a>24.解构赋值的使用</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/2021/js-array/"/>
      <url>/2021/js-array/</url>
      
        <content type="html"><![CDATA[<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><strong>直译</strong>：合并数组</p><p><strong>返回值</strong>：一个新的数组</p><p><code>arr1.concat(arr2, arr3, ..., arrX)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> letter = [<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]</span><br><span class="line">  <span class="keyword">var</span> number = [<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">  <span class="keyword">var</span> arr = letter.<span class="title function_">concat</span>(number)</span><br><span class="line">&lt; [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="number">123</span>, <span class="number">456</span>]</span><br></pre></td></tr></table></figure><h3 id="（ES6-）copyWithin"><a href="#（ES6-）copyWithin" class="headerlink" title="（ES6+）copyWithin()"></a>（ES6+）copyWithin()</h3><p><strong>直译</strong>：在内部复制</p><p><strong>返回值</strong>：会覆盖原数组</p><p><code>arr.copyWithin(target(必须), start, end)</code></p><p><em>start</em> 和 <em>end</em> 是可选值（<em>start</em> 默认为0，<em>end</em> 默认为length），截取 <em>start</em> 和 <em>end</em> 之间的值覆盖 <em>target</em> 位置上。</p><p>copyWithin() 方法将数组元素复制到数组中的另一个位置，覆盖现有值。</p><p>copyWithin() 方法永远不会向数组添加更多项。<strong>提示：</strong>copyWithin() 方法会覆盖原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">2</span>)</span><br><span class="line">&lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">&lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="（ES6-）entries"><a href="#（ES6-）entries" class="headerlink" title="（ES6+）entries()"></a>（ES6+）entries()</h3><p><strong>直译</strong>：进入（条目更合适？）</p><p><strong>返回值</strong>：一个新的 Array Iterator 对象</p><p><code>arr.entries()</code></p><p><em>entries()</em> 方法返回带有键&#x2F;值对的 Array Iterator 对象。</p><p>对于原始数组中的每一项，新的迭代对象将包含一个以索引为键，以项值为值的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt; <span class="keyword">for</span> (x <span class="keyword">of</span> arr.<span class="title function_">entries</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&lt; [<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p><strong>直译</strong>：所有</p><p><strong>返回值</strong>：一个布尔值</p><p><code>arr.every(function(currentValue(必需), index, arr), thisValue)</code></p><p>every() 方法检查数组中的所有元素是否都通过了测试（被作为函数提供）。</p><p>every() 方法对数组中存在的每个元素执行一次函数：</p><ul><li>如果找到函数返回 false 值的数组元素，every() 返回 false（并且不检查剩余值）</li><li>如果没有出现 false，every() 返回 true</li></ul><p><strong>注释：</strong>every() 不对没有值的数组元素执行函数。</p><p><strong>注释：</strong>every() 不改变原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> survey = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Steve&quot;</span>, <span class="attr">answer</span>: <span class="string">&quot;Yes&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Jessica&quot;</span>, <span class="attr">answer</span>: <span class="string">&quot;Yes&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Peter&quot;</span>, <span class="attr">answer</span>: <span class="string">&quot;Yes&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Elaine&quot;</span>, <span class="attr">answer</span>: <span class="string">&quot;No&quot;</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">&gt; <span class="keyword">function</span> <span class="title function_">isSameAnswer</span>(<span class="params">el, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (el.<span class="property">answer</span> === arr[index - <span class="number">1</span>].<span class="property">answer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&gt; survey.<span class="title function_">every</span>(isSameAnswer)</span><br><span class="line">&lt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）fill"><a href="#（ES6-）fill" class="headerlink" title="（ES6+）fill()"></a>（ES6+）fill()</h3><p><strong>直译</strong>：填充</p><p><strong>返回值</strong>：会覆盖原数组</p><p><code>array.fill(value(必须), start, end)</code></p><p>把 <em>value</em> 填充到 <em>start</em>（包含） 到 <em>end</em>（不包含） 之间，覆盖原来的值，默认覆盖所有值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>,<span class="string">&#x27;Tomato&#x27;</span>];</span><br><span class="line">  fruits.<span class="title function_">fill</span>(<span class="string">&quot;Kiwi&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">&lt; [<span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>, <span class="string">&#x27;Kiwi&#x27;</span>, <span class="string">&#x27;Kiwi&#x27;</span>, <span class="string">&#x27;Tomato&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><strong>直译</strong>：过滤器</p><p><strong>返回值</strong>：一个新的数组</p><p><code>array.filter(function(currentValue(必需), index, arr), thisValue)</code></p><p>用 <em>index</em>（包含） 到 <em>arr</em>（不包含） 的元素通过 <em>function</em> 的筛选，返回新的数组到 <em>thisValue</em>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&gt; ages.<span class="title function_">filter</span>(checkAdult)</span><br><span class="line">&lt; [<span class="number">32</span>, <span class="number">33</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/2021/js-string/"/>
      <url>/2021/js-string/</url>
      
        <content type="html"><![CDATA[<h1 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h1><blockquote><p><strong>string</strong> 这一单词原意就是绳子串成一串的意思，在编程语言里，大多是用来代表<strong>字符串</strong>，即连续的字符所组成的对象。学习<strong>String</strong>对象的操作方法，对于学习一门编程语言还是有着相当重要的意义的。</p></blockquote><blockquote><p>这里记录的对象方法中没有显示类的方法和Unicode字码这种不常用或者初学时不会涉及的方法。</p></blockquote><h2 id="1-查询类"><a href="#1-查询类" class="headerlink" title="1.查询类"></a>1.查询类</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><p><strong>直译</strong>：某某位置的字符串</p><p><code>str.charAt(index)</code></p><p><em>index</em> 这里只能为正数，超出查询范围和负数都返回空字符串<code>&#39;&#39;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">charAt</span>(<span class="number">2</span>)</span><br><span class="line">&lt; <span class="string">&#x27;c&#x27;</span></span><br><span class="line">&lt; <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">charAt</span>(<span class="number">9</span>)</span><br><span class="line">&gt; <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）at"><a href="#（ES6-）at" class="headerlink" title="（ES6+）at()"></a>（ES6+）at()</h3><p><code>at()</code>方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>) <span class="comment">// &quot;e&quot;</span></span><br><span class="line">str.<span class="title function_">at</span>(-<span class="number">1</span>) <span class="comment">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure><p>如果参数位置超出了字符串范围，<code>at()</code>返回<code>undefined</code>。</p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p><strong>直译</strong>：某某的索引</p><p><code>str.indexOf(searchvalue,fromindex)</code></p><p><em>searchvalue</em> 是查找的字符串（必填），<em>formindex</em> 是开始查找的位置（选填，不填为0）</p><p>匹配到了就返回匹配到的索引值，没有匹配到就返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;abcdabcd&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;cd&#x27;</span>)</span><br><span class="line">&lt; <span class="number">2</span></span><br><span class="line">&gt; <span class="string">&#x27;abcdabcd&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;cd&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">&lt; <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><strong>直译</strong>：寻找</p><p><code>str.search(regexp)</code></p><p>如果 <em>regexp</em> 是字符串的话，和 <code>indexOf()</code>一样，找到了返回的是索引，没找到返回 -1</p><p>与<code>indexOf()</code>区别：<code>search()</code> 方法可以使用正则表达式作为参数（全局选项g无效）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  str.<span class="title function_">search</span>(<span class="regexp">/o/</span>)</span><br><span class="line">&lt; <span class="number">4</span></span><br><span class="line">&gt; str.<span class="title function_">search</span>(<span class="regexp">/or/</span>)</span><br><span class="line">&lt; <span class="number">7</span></span><br><span class="line">&gt; str.<span class="title function_">search</span>(<span class="regexp">/o/</span>)</span><br><span class="line">&lt; <span class="number">4</span></span><br><span class="line">&gt; str.<span class="title function_">search</span>(<span class="regexp">/o/g</span>)</span><br><span class="line">&lt; <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p><strong>直译</strong>：某某最后的索引</p><p><code>str.lastIndexOf(searchvalue,fromindex)</code></p><p>注意：查找位置还是索引值，但是是倒着开始查询的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;abcdacbd&#x27;</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">6</span>)</span><br><span class="line">&lt; <span class="number">6</span></span><br><span class="line">&gt; <span class="string">&#x27;abcdacbd&#x27;</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">&lt; <span class="number">1</span></span><br><span class="line">&gt; <span class="string">&#x27;abcdacbd&#x27;</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">&lt; -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）includes-startsWith-endsWith"><a href="#（ES6-）includes-startsWith-endsWith" class="headerlink" title="（ES6+）includes(),startsWith(),endsWith()"></a>（ES6+）includes(),startsWith(),endsWith()</h3><p>确定一个字符串是否包含在另一个字符串中，ES6 又提供了三种新方法。</p><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">startsWith</span>(<span class="string">&#x27;world&#x27;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">endsWith</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h2 id="2-操作类"><a href="#2-操作类" class="headerlink" title="2.操作类"></a>2.操作类</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><strong>直译</strong>：合并（字符串或数组）</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.concat(str1,str2,...,strX)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  s.<span class="title function_">concat</span>(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>,<span class="string">&#x27;def&#x27;</span>)</span><br><span class="line">&lt; <span class="string">&#x27;abc123456def&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><strong>直译</strong>：和某某一致</p><p><code>str.match(searchvalue) str.match(regexp)</code></p><p>可以用正则表达，返回的是一个数组。其中存放了与它找到的匹配文本有关的信息。没有找到匹配的文本的话，返回null。</p><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p><strong>直译</strong>：替换</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.replace(regexp/substr,replacement)</code></p><p><em>replacement</em> 是一个字符串值。规定了替换文本或生成替换文本的函数。</p><p>是用 <em>replacement</em> 替换了 <em>regexp</em> 的第一次匹配或所有匹配之后得到的。</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><strong>直译</strong>：切片</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.slice(start,end)</code></p><p>截取 <em>start</em> 到 <em>end</em> 的字符串（其中 <em>start</em> 包括， <em>end</em> 不包括，-1是最后一个字符，以此类推）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;hello world!&#x27;</span>.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">&lt; <span class="string">&#x27;llo&#x27;</span></span><br><span class="line">&gt; <span class="string">&#x27;hello world!&#x27;</span>.<span class="title function_">slice</span>(<span class="number">6</span>,-<span class="number">1</span>)</span><br><span class="line">&lt; <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&gt; <span class="string">&#x27;hello world!&#x27;</span>.<span class="title function_">slice</span>(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line">&lt; <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p><strong>直译</strong>：划分</p><p><strong>返回值</strong>：一个字符串数组</p><p><code>str.split(separator,howmany)</code></p><p><em>separator</em> 是划分的地方（字符串或正则表达式）， <em>howmany</em> 返回字符串数组的最大长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&lt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt; <span class="string">&#x27;a.b.c.d&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">&lt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><strong>直译</strong>：无（可理解为对字符串下标作操作，可能？）</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.substr(start,length)</code></p><p><em>start</em> 为开始位置， <em>length</em>(可选) 为截取的最长长度，不能满足的话就到最后一个字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;abcdefghi&#x27;</span>.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">&lt; <span class="string">&#x27;cdefg&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p><strong>直译</strong>：无</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.substring(start,stop)</code></p><p><em>start</em> 处到 <em>stop</em>-1 处的所有字符，包括 <em>start</em> 处的字符，但不包括 <em>stop</em> 处的字符。其长度为 <em>stop</em> 减 <em>start</em>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;hello world!&#x27;</span>.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>)</span><br><span class="line">&lt; <span class="string">&#x27;lo w&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="toLowerCase-x2F-toUpperCase"><a href="#toLowerCase-x2F-toUpperCase" class="headerlink" title="toLowerCase() &#x2F; toUpperCase()"></a>toLowerCase() &#x2F; toUpperCase()</h3><p><strong>直译</strong>：转为小写&#x2F;大写</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.toUpperCase()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&lt; <span class="string">&#x27;HELLO&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）repeat"><a href="#（ES6-）repeat" class="headerlink" title="（ES6+）repeat()"></a>（ES6+）repeat()</h3><p><strong>直译</strong>：重复</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">// &quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">0</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2.9</span>) <span class="comment">// &quot;nana&quot;</span></span><br></pre></td></tr></table></figure><p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于<code>-0</code>，<code>repeat</code>视同为 0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(-<span class="number">0.9</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参数<code>NaN</code>等同于 0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="title class_">NaN</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;na&#x27;</span>) <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;3&#x27;</span>) <span class="comment">// &quot;nanana&quot;</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）padStart-x2F-padEnd"><a href="#（ES6-）padStart-x2F-padEnd" class="headerlink" title="（ES6+）padStart()&#x2F;padEnd()"></a>（ES6+）padStart()&#x2F;padEnd()</h3><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;xxx&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;0123456789&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;0123456abc&#x27;</span></span><br></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>) <span class="comment">// &#x27;   x&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">4</span>) <span class="comment">// &#x27;x   &#x27;</span></span><br></pre></td></tr></table></figure><p><code>padStart()</code>的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000000001&quot;</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000000012&quot;</span></span><br><span class="line"><span class="string">&#x27;123456&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000123456&quot;</span></span><br></pre></td></tr></table></figure><p>另一个用途是提示字符串格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="comment">// &quot;YYYY-MM-12&quot;</span></span><br><span class="line"><span class="string">&#x27;09-12&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="comment">// &quot;YYYY-09-12&quot;</span></span><br></pre></td></tr></table></figure><h3 id="（ES6-）replaceAll"><a href="#（ES6-）replaceAll" class="headerlink" title="（ES6+）replaceAll()"></a>（ES6+）replaceAll()</h3><p><strong>直译</strong>：替换所有</p><p><strong>返回值</strong>：一个新的字符串</p><p><code>str.replaceAll(searchValue, replacement)</code></p><p><em>replaceAll()</em> 可以看作是 <em>replace()</em> 的全局替代品，可以不用正则表达式就能完成替换所有。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/b/g</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;aa__cc&#x27;</span></span><br><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.<span class="title function_">replaceAll</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;aa__cc&#x27;</span></span><br></pre></td></tr></table></figure><p>如果<code>searchValue</code>是一个不带有<code>g</code>修饰符的正则表达式，<code>replaceAll()</code>会报错。这一点跟<code>replace()</code>不同。</p><blockquote><p>也就是说，它的意思是它已经是强制全局了，不允许你不加&#x2F;g</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/b/</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.<span class="title function_">replaceAll</span>(<span class="regexp">/b/</span>, <span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，世界</title>
      <link href="/2021/hello-world/"/>
      <url>/2021/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>这是我第一次用Hexo，来写博客。说来惭愧，从2018年开始写东西，但是如今下来也没有留下什么痕迹。</p><p>最开始写blog，用的是大名鼎鼎的的WordPress，不过觉得太冗余了，用来做商城不错，但是用来做blog就有点不太合适了。</p><p>之后就用了国人的Typecho，简洁轻量，对于喜欢Markdown写blog的我来说，比WP用起来舒爽千倍，不吃服务器，算是入门首选的blog系统了。</p><p>所谓大道至简嘛，越到后面就越想要简单点的东西，于是开始用Hexo进行记录我的生活。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>我用的是JerryC大佬的<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>主题，主要是好看而且文档非常详细我个人非常喜欢并且强烈推荐。关于这个主题，还得加一篇来当作工具书用。</p><p>当然也有很多其他优秀的Hexo主题,就不一一列举了。</p><p>最后，你好世界！</p><p><em>END</em></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客记录 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
